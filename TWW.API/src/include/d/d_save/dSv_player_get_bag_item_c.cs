//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TWW.API {
    
    
    public class dSv_player_get_bag_item_c {
        
        [System.Text.Json.Serialization.JsonIgnoreAttribute()]
        private u32 pointer;
        
        public u32 mReserveFlags {get => this._mReserveFlags(); set => this._mReserveFlags(value);}//;
        
        public u8 mBeastFlags {get => this._mBeastFlags(); set => this._mBeastFlags(value);}//;
        
        public u8 mBaitFlags {get => this._mBaitFlags(); set => this._mBaitFlags(value);}//;
        
        public u8[] unk_0x6 {get => this._unk_0x6(); set => this._unk_0x6(value);}//;
        
        public dSv_player_get_bag_item_c(u32 pointer) {
           this.pointer = pointer;
        }
        
        public static uint getSize() {
          return 0xC;
        }
        
        private u32 _mReserveFlags() {
            return Memory.RAM.ReadU32(this.pointer + 0x0);
        }
        
        private void _mReserveFlags(u32 value) {
            Memory.RAM.WriteU32(this.pointer + 0x0, value);
        }
        
        private u8 _mBeastFlags() {
            return Memory.RAM.ReadU8(this.pointer + 0x4);
        }
        
        private void _mBeastFlags(u8 value) {
            Memory.RAM.WriteU8(this.pointer + 0x4, value);
        }
        
        private u8 _mBaitFlags() {
            return Memory.RAM.ReadU8(this.pointer + 0x5);
        }
        
        private void _mBaitFlags(u8 value) {
            Memory.RAM.WriteU8(this.pointer + 0x5, value);
        }
        
        // #ARRCOUNT 6
        private u8[] _unk_0x6() {
            u8[] bytes = new u8[6]; for(u32 i = 0; i < 6; i++){bytes[i] = Memory.RAM.ReadU8(this.pointer + 0x6 + (i * 1));} return bytes;
        }
        
        private void _unk_0x6(u8[] value) {
            for(u32 i = 0; i < 6; i++){Memory.RAM.WriteU8(this.pointer + 0x6 + (i * 1), value[i]);}
        }
    }
}
