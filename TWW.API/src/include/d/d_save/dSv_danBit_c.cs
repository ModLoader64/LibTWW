//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TWW.API {
    
    
    public class dSv_danBit_c {
        
        [System.Text.Json.Serialization.JsonIgnoreAttribute()]
        private u32 pointer;
        
        public s8 mStageNo {get => this._mStageNo(); set => this._mStageNo(value);}//;
        
        public u8 mGbaRupeeCount {get => this._mGbaRupeeCount(); set => this._mGbaRupeeCount(value);}//;
        
        public u32[] mSwitch {get => this._mSwitch(); set => this._mSwitch(value);}//;
        
        public dSv_danBit_c(u32 pointer) {
           this.pointer = pointer;
        }
        
        public static uint getSize() {
          return 0xC;
        }
        
        private s8 _mStageNo() {
            return Memory.RAM.ReadS8(this.pointer + 0x0);
        }
        
        private void _mStageNo(s8 value) {
            Memory.RAM.WriteS8(this.pointer + 0x0, value);
        }
        
        private u8 _mGbaRupeeCount() {
            return Memory.RAM.ReadU8(this.pointer + 0x1);
        }
        
        private void _mGbaRupeeCount(u8 value) {
            Memory.RAM.WriteU8(this.pointer + 0x1, value);
        }
        
        // #ARRCOUNT 2
        private u32[] _mSwitch() {
            u32[] bytes = new u32[2]; for(u32 i = 0; i < 2; i++){bytes[i] = Memory.RAM.ReadU32(this.pointer + 0x4 + (i * 4));} return bytes;
        }
        
        private void _mSwitch(u32[] value) {
            for(u32 i = 0; i < 2; i++){Memory.RAM.WriteU32(this.pointer + 0x4 + (i * 4), value[i]);}
        }
    }
}
