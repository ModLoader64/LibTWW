//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TWW.API {
    
    
    public class dNpc_HIO_c {
        
        [System.Text.Json.Serialization.JsonIgnoreAttribute()]
        private u32 pointer;
        
        public f32 m04 {get => this._m04(); set => this._m04(value);}//;
        
        public s16 mMaxHeadX {get => this._mMaxHeadX(); set => this._mMaxHeadX(value);}//;
        
        public s16 mMaxBackboneX {get => this._mMaxBackboneX(); set => this._mMaxBackboneX(value);}//;
        
        public s16 mMaxHeadY {get => this._mMaxHeadY(); set => this._mMaxHeadY(value);}//;
        
        public s16 mMaxBackboneY {get => this._mMaxBackboneY(); set => this._mMaxBackboneY(value);}//;
        
        public s16 mMinHeadX {get => this._mMinHeadX(); set => this._mMinHeadX(value);}//;
        
        public s16 mMinBackboneX {get => this._mMinBackboneX(); set => this._mMinBackboneX(value);}//;
        
        public s16 mMinHeadY {get => this._mMinHeadY(); set => this._mMinHeadY(value);}//;
        
        public s16 mMinBackboneY {get => this._mMinBackboneY(); set => this._mMinBackboneY(value);}//;
        
        public s16 mMaxTurnStep {get => this._mMaxTurnStep(); set => this._mMaxTurnStep(value);}//;
        
        public s16 mMaxHeadTurnVel {get => this._mMaxHeadTurnVel(); set => this._mMaxHeadTurnVel(value);}//;
        
        public f32 mAttnYOffset {get => this._mAttnYOffset(); set => this._mAttnYOffset(value);}//;
        
        public s16 mMaxAttnAngleY {get => this._mMaxAttnAngleY(); set => this._mMaxAttnAngleY(value);}//;
        
        public u8 m22 {get => this._m22(); set => this._m22(value);}//;
        
        public u8[] m23 {get => this._m23(); set => this._m23(value);}//;
        
        public f32 mMaxAttnDistXZ {get => this._mMaxAttnDistXZ(); set => this._mMaxAttnDistXZ(value);}//;
        
        public dNpc_HIO_c(u32 pointer) {
           this.pointer = pointer;
        }
        
        public static uint getSize() {
          return 0x0; // DEADBEEF TODO: Fix Addr
        }
        
        private f32 _m04() {
            return Memory.RAM.ReadF32(this.pointer + 0x04);
        }
        
        private void _m04(f32 value) {
            Memory.RAM.WriteF32(this.pointer + 0x04, value);
        }
        
        private s16 _mMaxHeadX() {
            return Memory.RAM.ReadS16(this.pointer + 0x08);
        }
        
        private void _mMaxHeadX(s16 value) {
            Memory.RAM.WriteS16(this.pointer + 0x08, value);
        }
        
        private s16 _mMaxBackboneX() {
            return Memory.RAM.ReadS16(this.pointer + 0x0A);
        }
        
        private void _mMaxBackboneX(s16 value) {
            Memory.RAM.WriteS16(this.pointer + 0x0A, value);
        }
        
        private s16 _mMaxHeadY() {
            return Memory.RAM.ReadS16(this.pointer + 0x0C);
        }
        
        private void _mMaxHeadY(s16 value) {
            Memory.RAM.WriteS16(this.pointer + 0x0C, value);
        }
        
        private s16 _mMaxBackboneY() {
            return Memory.RAM.ReadS16(this.pointer + 0x0E);
        }
        
        private void _mMaxBackboneY(s16 value) {
            Memory.RAM.WriteS16(this.pointer + 0x0E, value);
        }
        
        private s16 _mMinHeadX() {
            return Memory.RAM.ReadS16(this.pointer + 0x10);
        }
        
        private void _mMinHeadX(s16 value) {
            Memory.RAM.WriteS16(this.pointer + 0x10, value);
        }
        
        private s16 _mMinBackboneX() {
            return Memory.RAM.ReadS16(this.pointer + 0x12);
        }
        
        private void _mMinBackboneX(s16 value) {
            Memory.RAM.WriteS16(this.pointer + 0x12, value);
        }
        
        private s16 _mMinHeadY() {
            return Memory.RAM.ReadS16(this.pointer + 0x14);
        }
        
        private void _mMinHeadY(s16 value) {
            Memory.RAM.WriteS16(this.pointer + 0x14, value);
        }
        
        private s16 _mMinBackboneY() {
            return Memory.RAM.ReadS16(this.pointer + 0x16);
        }
        
        private void _mMinBackboneY(s16 value) {
            Memory.RAM.WriteS16(this.pointer + 0x16, value);
        }
        
        private s16 _mMaxTurnStep() {
            return Memory.RAM.ReadS16(this.pointer + 0x18);
        }
        
        private void _mMaxTurnStep(s16 value) {
            Memory.RAM.WriteS16(this.pointer + 0x18, value);
        }
        
        // TODO:Notsurewhatthedifferencebetweenthisandtheabovefieldis
        private s16 _mMaxHeadTurnVel() {
            return Memory.RAM.ReadS16(this.pointer + 0x1A);
        }
        
        private void _mMaxHeadTurnVel(s16 value) {
            Memory.RAM.WriteS16(this.pointer + 0x1A, value);
        }
        
        private f32 _mAttnYOffset() {
            return Memory.RAM.ReadF32(this.pointer + 0x1C);
        }
        
        private void _mAttnYOffset(f32 value) {
            Memory.RAM.WriteF32(this.pointer + 0x1C, value);
        }
        
        private s16 _mMaxAttnAngleY() {
            return Memory.RAM.ReadS16(this.pointer + 0x20);
        }
        
        private void _mMaxAttnAngleY(s16 value) {
            Memory.RAM.WriteS16(this.pointer + 0x20, value);
        }
        
        private u8 _m22() {
            return Memory.RAM.ReadU8(this.pointer + 0x22);
        }
        
        private void _m22(u8 value) {
            Memory.RAM.WriteU8(this.pointer + 0x22, value);
        }
        
        // #ARRCOUNT 1
        private u8[] _m23() {
            u8[] bytes = new u8[1]; for(u32 i = 0; i < 1; i++){bytes[i] = Memory.RAM.ReadU8(this.pointer + 0x23 + (i * 1));} return bytes;
        }
        
        private void _m23(u8[] value) {
            for(u32 i = 0; i < 1; i++){Memory.RAM.WriteU8(this.pointer + 0x23 + (i * 1), value[i]);}
        }
        
        private f32 _mMaxAttnDistXZ() {
            return Memory.RAM.ReadF32(this.pointer + 0x24);
        }
        
        private void _mMaxAttnDistXZ(f32 value) {
            Memory.RAM.WriteF32(this.pointer + 0x24, value);
        }
    }
}
