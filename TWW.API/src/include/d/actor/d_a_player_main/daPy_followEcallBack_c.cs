//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TWW.API {
    
    
    public class daPy_followEcallBack_c {
        
        [System.Text.Json.Serialization.JsonIgnoreAttribute()]
        private u32 pointer;
        
        //public JPABaseEmitter mpEmitter {get => this._mpEmitter(); set => this._mpEmitter(value);}//;
        
        public cXyz field_0x08 {get => this._field_0x08(); set => this._field_0x08(value);}//;
        
        public csXyz field_0x14 {get => this._field_0x14(); set => this._field_0x14(value);}//;
        
        public u8[] field_0x1A {get => this._field_0x1A(); set => this._field_0x1A(value);}//;
        
        public daPy_followEcallBack_c(u32 pointer) {
           this.pointer = pointer;
        }
        
        public static uint getSize() {
          return 0x1C;
        }
/*        
        private JPABaseEmitter _mpEmitter() {
            return new JPABaseEmitter(this.pointer + 0x04);
        }
        
        private void _mpEmitter(JPABaseEmitter value) {
        }*/
        
        private cXyz _field_0x08() {
            return new cXyz(this.pointer + 0x08);
        }
        
        private void _field_0x08(cXyz value) {
        }
        
        private csXyz _field_0x14() {
            return new csXyz(this.pointer + 0x14);
        }
        
        private void _field_0x14(csXyz value) {
        }
        
        // #ARRCOUNT 2
        private u8[] _field_0x1A() {
            u8[] bytes = new u8[2]; for(u32 i = 0; i < 2; i++){bytes[i] = Memory.RAM.ReadU8(this.pointer + 0x1A + (i * 1));} return bytes;
        }
        
        private void _field_0x1A(u8[] value) {
            for(u32 i = 0; i < 2; i++){Memory.RAM.WriteU8(this.pointer + 0x1A + (i * 1), value[i]);}
        }
    }
}
