//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TWW.API {
    
    
    public class ItemTableList {
        
        [System.Text.Json.Serialization.JsonIgnoreAttribute()]
        private u32 pointer;
        
        public u8[] mMagic {get => this._mMagic(); set => this._mMagic(value);}//;
        
        public s16 mEntryCount {get => this._mEntryCount(); set => this._mEntryCount(value);}//;
        
        public u32 mPadding {get => this._mPadding(); set => this._mPadding(value);}//;
        
        public u8[] mItemTables {get => this._mItemTables(); set => this._mItemTables(value);}//;
        
        public ItemTableList(u32 pointer) {
           this.pointer = pointer;
        }
        
        public static uint getSize() {
          return 0x0; // DEADBEEF TODO: Fix Addr
        }
        
        // #ARRCOUNT 0xA
        private u8[] _mMagic() {
            u8[] bytes = new u8[0xA]; for(u32 i = 0; i < 0xA; i++){bytes[i] = Memory.RAM.ReadU8(this.pointer + 0x0 + (i * 1));} return bytes; // DEADBEEF TODO: Fix Addr
        }
        
        private void _mMagic(u8[] value) {
            for(u32 i = 0; i < 0xA; i++){Memory.RAM.WriteU8(this.pointer + 0x0 + (i * 1), value[i]);} // DEADBEEF TODO: Fix Addr
        }
        
        private s16 _mEntryCount() {
            return Memory.RAM.ReadS16(this.pointer + 0x0); // DEADBEEF TODO: Fix Addr
        }
        
        private void _mEntryCount(s16 value) {
            Memory.RAM.WriteS16(this.pointer + 0x0, value);// DEADBEEF TODO: Fix Addr
        }
        
        private u32 _mPadding() {
            return Memory.RAM.ReadU32(this.pointer + 0x0); // DEADBEEF TODO: Fix Addr
        }
        
        private void _mPadding(u32 value) {
            Memory.RAM.WriteU32(this.pointer + 0x0, value);// DEADBEEF TODO: Fix Addr
        }
        
        // #ARRCOUNT 0x1E
        private u8[] _mItemTables() {
            u8[] bytes = new u8[0x1E]; for(u32 i = 0; i < 0x1E; i++){bytes[i] = Memory.RAM.ReadU8(this.pointer + 0x0 + (i * 1));} return bytes; // DEADBEEF TODO: Fix Addr
        }
        
        private void _mItemTables(u8[] value) {
            for(u32 i = 0; i < 0x1E; i++){Memory.RAM.WriteU8(this.pointer + 0x0 + (i * 1), value[i]);} // DEADBEEF TODO: Fix Addr
        }
    }
}
