//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TWW.API {
    
    
    public class __d_timer_info_c {
        
        [System.Text.Json.Serialization.JsonIgnoreAttribute()]
        private u32 pointer;
        
        //public dTimer_c mTimerPtr {get => this._mTimerPtr(); set => this._mTimerPtr(value);}//;
        
        public s32 mTimerNowTimeMs {get => this._mTimerNowTimeMs(); set => this._mTimerNowTimeMs(value);}//;
        
        public s32 mTimerLimitTimeMs {get => this._mTimerLimitTimeMs(); set => this._mTimerLimitTimeMs(value);}//;
        
        public s32 mTimerMode {get => this._mTimerMode(); set => this._mTimerMode(value);}//;
        
        public u16 mTimerType {get => this._mTimerType(); set => this._mTimerType(value);}//;
        
        public __d_timer_info_c(u32 pointer) {
           this.pointer = pointer;
        }
        
        public static uint getSize() {
          return 0x0; // DEADBEEF TODO: Fix Addr
        }
        
        /*private dTimer_c _mTimerPtr() {
            return new dTimer_c(this.pointer + 0x00);
        }
        
        private void _mTimerPtr(dTimer_c value) {
        }*/
        
        private s32 _mTimerNowTimeMs() {
            return Memory.RAM.ReadS32(this.pointer + 0x04);
        }
        
        private void _mTimerNowTimeMs(s32 value) {
            Memory.RAM.WriteS32(this.pointer + 0x04, value);
        }
        
        private s32 _mTimerLimitTimeMs() {
            return Memory.RAM.ReadS32(this.pointer + 0x08);
        }
        
        private void _mTimerLimitTimeMs(s32 value) {
            Memory.RAM.WriteS32(this.pointer + 0x08, value);
        }
        
        private s32 _mTimerMode() {
            return Memory.RAM.ReadS32(this.pointer + 0x0C);
        }
        
        private void _mTimerMode(s32 value) {
            Memory.RAM.WriteS32(this.pointer + 0x0C, value);
        }
        
        private u16 _mTimerType() {
            return Memory.RAM.ReadU16(this.pointer + 0x10);
        }
        
        private void _mTimerType(u16 value) {
            Memory.RAM.WriteU16(this.pointer + 0x10, value);
        }
    }
}
