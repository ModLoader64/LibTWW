//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TWW.API {
    
    
    public class stage_lightvec_info_class {
        
        [System.Text.Json.Serialization.JsonIgnoreAttribute()]
        private u32 pointer;
        
        //public Vec mPos {get => this._mPos(); set => this._mPos(value);}//;
        
        public f32 mRadius {get => this._mRadius(); set => this._mRadius(value);}//;
        
        public f32 field_0x10 {get => this._field_0x10(); set => this._field_0x10(value);}//;
        
        public f32 field_0x14 {get => this._field_0x14(); set => this._field_0x14(value);}//;
        
        public u8[] field_0x18 {get => this._field_0x18(); set => this._field_0x18(value);}//;
        
        public u8 mFluctuation {get => this._mFluctuation(); set => this._mFluctuation(value);}//;
        
        public stage_lightvec_info_class(u32 pointer) {
           this.pointer = pointer;
        }
        
        public static uint getSize() {
          return 0x0; // DEADBEEF TODO: Fix Addr
        }
/*        
        private Vec _mPos() {
            return new Vec(this.pointer + 0x00);
        }
        
        private void _mPos(Vec value) {
        }*/
        
        private f32 _mRadius() {
            return Memory.RAM.ReadF32(this.pointer + 0x0C);
        }
        
        private void _mRadius(f32 value) {
            Memory.RAM.WriteF32(this.pointer + 0x0C, value);
        }
        
        private f32 _field_0x10() {
            return Memory.RAM.ReadF32(this.pointer + 0x10);
        }
        
        private void _field_0x10(f32 value) {
            Memory.RAM.WriteF32(this.pointer + 0x10, value);
        }
        
        private f32 _field_0x14() {
            return Memory.RAM.ReadF32(this.pointer + 0x14);
        }
        
        private void _field_0x14(f32 value) {
            Memory.RAM.WriteF32(this.pointer + 0x14, value);
        }
        
        // #ARRCOUNT 3
        private u8[] _field_0x18() {
            u8[] bytes = new u8[3]; for(u32 i = 0; i < 3; i++){bytes[i] = Memory.RAM.ReadU8(this.pointer + 0x18 + (i * 1));} return bytes;
        }
        
        private void _field_0x18(u8[] value) {
            for(u32 i = 0; i < 3; i++){Memory.RAM.WriteU8(this.pointer + 0x18 + (i * 1), value[i]);}
        }
        
        private u8 _mFluctuation() {
            return Memory.RAM.ReadU8(this.pointer + 0x1B);
        }
        
        private void _mFluctuation(u8 value) {
            Memory.RAM.WriteU8(this.pointer + 0x1B, value);
        }
    }
}
