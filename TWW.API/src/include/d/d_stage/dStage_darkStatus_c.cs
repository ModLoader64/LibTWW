//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TWW.API {
    
    
    public class dStage_darkStatus_c {
        
        [System.Text.Json.Serialization.JsonIgnoreAttribute()]
        private u32 pointer;
        
        public u8 mEnvAlpha {get => this._mEnvAlpha(); set => this._mEnvAlpha(value);}//;
        
        public u8[] mBokoAlpha {get => this._mBokoAlpha(); set => this._mBokoAlpha(value);}//;
        
        public f32[] mBokoScale {get => this._mBokoScale(); set => this._mBokoScale(value);}//;
        
        public u32 field_0xc {get => this._field_0xc(); set => this._field_0xc(value);}//;
        
        public f32[] field_0x10 {get => this._field_0x10(); set => this._field_0x10(value);}//;
        
        public f32[] field_0x18 {get => this._field_0x18(); set => this._field_0x18(value);}//;
        
        public dStage_roomDt_c mRoomDt {get => this._mRoomDt(); set => this._mRoomDt(value);}//;
        
        //public dKy_tevstr_c mTevStr {get => this._mTevStr(); set => this._mTevStr(value);}//;
        
        public u8 mFlags {get => this._mFlags(); set => this._mFlags(value);}//;
        
        //public bool mDraw {get => this._mDraw(); set => this._mDraw(value);}//;
        
        public s8 mZoneCount {get => this._mZoneCount(); set => this._mZoneCount(value);}//;
        
        public s8 mZoneNo {get => this._mZoneNo(); set => this._mZoneNo(value);}//;
        
        public s8 mMemBlockID {get => this._mMemBlockID(); set => this._mMemBlockID(value);}//;
        
        public u32 mProcID {get => this._mProcID(); set => this._mProcID(value);}//;
        
        //public dBgW mpBgW {get => this._mpBgW(); set => this._mpBgW(value);}//;
        
        public u8[] field_0x0 {get => this._field_0x0(); set => this._field_0x0(value);}//;
        
        public dStage_darkStatus_c(u32 pointer) {
           this.pointer = pointer;
        }
        
        public static uint getSize() {
          return 0x0; // DEADBEEF TODO: Fix Addr
        }
        
        private u8 _mEnvAlpha() {
            return Memory.RAM.ReadU8(this.pointer + 0x00);
        }
        
        private void _mEnvAlpha(u8 value) {
            Memory.RAM.WriteU8(this.pointer + 0x00, value);
        }
        
        // #ARRCOUNT 2
        private u8[] _mBokoAlpha() {
            u8[] bytes = new u8[2]; for(u32 i = 0; i < 2; i++){bytes[i] = Memory.RAM.ReadU8(this.pointer + 0x01 + (i * 1));} return bytes;
        }
        
        private void _mBokoAlpha(u8[] value) {
            for(u32 i = 0; i < 2; i++){Memory.RAM.WriteU8(this.pointer + 0x01 + (i * 1), value[i]);}
        }
        
        // #ARRCOUNT 2
        private f32[] _mBokoScale() {
            f32[] bytes = new f32[2]; for(u32 i = 0; i < 2; i++){bytes[i] = Memory.RAM.ReadF32(this.pointer + 0x04 + (i * 4));} return bytes;
        }
        
        private void _mBokoScale(f32[] value) {
            for(u32 i = 0; i < 2; i++){Memory.RAM.WriteF32(this.pointer + 0x04 + (i * 4), value[i]);}
        }
        
        private u32 _field_0xc() {
            return Memory.RAM.ReadU32(this.pointer + 0x0C);
        }
        
        private void _field_0xc(u32 value) {
            Memory.RAM.WriteU32(this.pointer + 0x0C, value);
        }
        
        // #ARRCOUNT 2
        private f32[] _field_0x10() {
            f32[] bytes = new f32[2]; for(u32 i = 0; i < 2; i++){bytes[i] = Memory.RAM.ReadF32(this.pointer + 0x10 + (i * 4));} return bytes;
        }
        
        private void _field_0x10(f32[] value) {
            for(u32 i = 0; i < 2; i++){Memory.RAM.WriteF32(this.pointer + 0x10 + (i * 4), value[i]);}
        }
        
        // #ARRCOUNT 2
        private f32[] _field_0x18() {
            f32[] bytes = new f32[2]; for(u32 i = 0; i < 2; i++){bytes[i] = Memory.RAM.ReadF32(this.pointer + 0x18 + (i * 4));} return bytes;
        }
        
        private void _field_0x18(f32[] value) {
            for(u32 i = 0; i < 2; i++){Memory.RAM.WriteF32(this.pointer + 0x18 + (i * 4), value[i]);}
        }
        
        private dStage_roomDt_c _mRoomDt() {
            return new dStage_roomDt_c(this.pointer + 0x000);
        }
        
        private void _mRoomDt(dStage_roomDt_c value) {
        }
        
        /*private dKy_tevstr_c _mTevStr() {
            return new dKy_tevstr_c(this.pointer + 0x054);
        }
        
        private void _mTevStr(dKy_tevstr_c value) {
        }*/
        
        private u8 _mFlags() {
            return Memory.RAM.ReadU8(this.pointer + 0x104);
        }
        
        private void _mFlags(u8 value) {
            Memory.RAM.WriteU8(this.pointer + 0x104, value);
        }
        
        /*private bool _mDraw() {
            return new bool(this.pointer + 0x105);
        }
        
        private void _mDraw(bool value) {
        }*/
        
        private s8 _mZoneCount() {
            return Memory.RAM.ReadS8(this.pointer + 0x106);
        }
        
        private void _mZoneCount(s8 value) {
            Memory.RAM.WriteS8(this.pointer + 0x106, value);
        }
        
        private s8 _mZoneNo() {
            return Memory.RAM.ReadS8(this.pointer + 0x107);
        }
        
        private void _mZoneNo(s8 value) {
            Memory.RAM.WriteS8(this.pointer + 0x107, value);
        }
        
        private s8 _mMemBlockID() {
            return Memory.RAM.ReadS8(this.pointer + 0x108);
        }
        
        private void _mMemBlockID(s8 value) {
            Memory.RAM.WriteS8(this.pointer + 0x108, value);
        }
        
        private u32 _mProcID() {
            return Memory.RAM.ReadU32(this.pointer + 0x10C);
        }
        
        private void _mProcID(u32 value) {
            Memory.RAM.WriteU32(this.pointer + 0x10C, value);
        }
        
        /*private dBgW _mpBgW() {
            return new dBgW(this.pointer + 0x110);
        }
        
        private void _mpBgW(dBgW value) {
        }*/
        
        // #ARRCOUNT 4
        private u8[] _field_0x0() {
            u8[] bytes = new u8[4]; for(u32 i = 0; i < 4; i++){bytes[i] = Memory.RAM.ReadU8(this.pointer + 0x0 + (i * 1));} return bytes;
        }
        
        private void _field_0x0(u8[] value) {
            for(u32 i = 0; i < 4; i++){Memory.RAM.WriteU8(this.pointer + 0x0 + (i * 1), value[i]);}
        }
    }
}
