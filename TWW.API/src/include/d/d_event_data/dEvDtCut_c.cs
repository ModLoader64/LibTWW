//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TWW.API {
    
    
    public class dEvDtCut_c {
        
        [System.Text.Json.Serialization.JsonIgnoreAttribute()]
        private u32 pointer;
        
        public char[] mName {get => this._mName(); set => this._mName(value);}//;
        
        public u32 mTagId {get => this._mTagId(); set => this._mTagId(value);}//;
        
        public u32 mIndex {get => this._mIndex(); set => this._mIndex(value);}//;
        
        public u32[] mStartFlag {get => this._mStartFlag(); set => this._mStartFlag(value);}//;
        
        public u32 mFlagIdx {get => this._mFlagIdx(); set => this._mFlagIdx(value);}//;
        
        public u32 mFirstDataIdx {get => this._mFirstDataIdx(); set => this._mFirstDataIdx(value);}//;
        
        public u32 mNextCutIdx {get => this._mNextCutIdx(); set => this._mNextCutIdx(value);}//;
        
        public u32[] field_0x40 {get => this._field_0x40(); set => this._field_0x40(value);}//;
        
        public dEvDtCut_c(u32 pointer) {
           this.pointer = pointer;
        }
        
        public static uint getSize() {
          return 0x0; // DEADBEEF TODO: Fix Addr
        }
        
        // #ARRCOUNT 32
        private char[] _mName() {
            char[] bytes = new char[32]; for(u32 i = 0; i < 32; i++){bytes[i] = (char)Memory.RAM.ReadU8(this.pointer + 0x00 + (i * 1));} return bytes;
        }
        
        private void _mName(char[] value) {
            for(u32 i = 0; i < 32; i++){Memory.RAM.WriteU8(this.pointer + 0x00 + (i * 1), (u8)value[i]);}
        }
        
        private u32 _mTagId() {
            return Memory.RAM.ReadU32(this.pointer + 0x20);
        }
        
        private void _mTagId(u32 value) {
            Memory.RAM.WriteU32(this.pointer + 0x20, value);
        }
        
        private u32 _mIndex() {
            return Memory.RAM.ReadU32(this.pointer + 0x24);
        }
        
        private void _mIndex(u32 value) {
            Memory.RAM.WriteU32(this.pointer + 0x24, value);
        }
        
        // #ARRCOUNT 3
        private u32[] _mStartFlag() {
            u32[] bytes = new u32[3]; for(u32 i = 0; i < 3; i++){bytes[i] = Memory.RAM.ReadU32(this.pointer + 0x28 + (i * 4));} return bytes;
        }
        
        private void _mStartFlag(u32[] value) {
            for(u32 i = 0; i < 3; i++){Memory.RAM.WriteU32(this.pointer + 0x28 + (i * 4), value[i]);}
        }
        
        private u32 _mFlagIdx() {
            return Memory.RAM.ReadU32(this.pointer + 0x34);
        }
        
        private void _mFlagIdx(u32 value) {
            Memory.RAM.WriteU32(this.pointer + 0x34, value);
        }
        
        private u32 _mFirstDataIdx() {
            return Memory.RAM.ReadU32(this.pointer + 0x38);
        }
        
        private void _mFirstDataIdx(u32 value) {
            Memory.RAM.WriteU32(this.pointer + 0x38, value);
        }
        
        private u32 _mNextCutIdx() {
            return Memory.RAM.ReadU32(this.pointer + 0x3C);
        }
        
        private void _mNextCutIdx(u32 value) {
            Memory.RAM.WriteU32(this.pointer + 0x3C, value);
        }
        
        // #ARRCOUNT 4
        private u32[] _field_0x40() {
            u32[] bytes = new u32[4]; for(u32 i = 0; i < 4; i++){bytes[i] = Memory.RAM.ReadU32(this.pointer + 0x40 + (i * 4));} return bytes;
        }
        
        private void _field_0x40(u32[] value) {
            for(u32 i = 0; i < 4; i++){Memory.RAM.WriteU32(this.pointer + 0x40 + (i * 4), value[i]);}
        }
    }
}
