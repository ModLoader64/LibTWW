//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TWW.API {
    
    
    public class event_binary_data_header {
        
        [System.Text.Json.Serialization.JsonIgnoreAttribute()]
        private u32 pointer;
        
        public u32 eventTop {get => this._eventTop(); set => this._eventTop(value);}//;
        
        public s32 eventNum {get => this._eventNum(); set => this._eventNum(value);}//;
        
        public u32 staffTop {get => this._staffTop(); set => this._staffTop(value);}//;
        
        public s32 staffNum {get => this._staffNum(); set => this._staffNum(value);}//;
        
        public u32 cutTop {get => this._cutTop(); set => this._cutTop(value);}//;
        
        public s32 cutNum {get => this._cutNum(); set => this._cutNum(value);}//;
        
        public u32 dataTop {get => this._dataTop(); set => this._dataTop(value);}//;
        
        public s32 dataNum {get => this._dataNum(); set => this._dataNum(value);}//;
        
        public u32 fDataTop {get => this._fDataTop(); set => this._fDataTop(value);}//;
        
        public s32 fDataNum {get => this._fDataNum(); set => this._fDataNum(value);}//;
        
        public u32 iDataTop {get => this._iDataTop(); set => this._iDataTop(value);}//;
        
        public s32 iDataNum {get => this._iDataNum(); set => this._iDataNum(value);}//;
        
        public u32 sDataTop {get => this._sDataTop(); set => this._sDataTop(value);}//;
        
        public s32 sDataNum {get => this._sDataNum(); set => this._sDataNum(value);}//;
        
        public u8[] unk {get => this._unk(); set => this._unk(value);}//;
        
        public event_binary_data_header(u32 pointer) {
           this.pointer = pointer;
        }
        
        public static uint getSize() {
          return 0x40;
        }
        
        // offsettoEventchunk
        private u32 _eventTop() {
            return Memory.RAM.ReadU32(this.pointer + 0x00);
        }
        
        private void _eventTop(u32 value) {
            Memory.RAM.WriteU32(this.pointer + 0x00, value);
        }
        
        private s32 _eventNum() {
            return Memory.RAM.ReadS32(this.pointer + 0x04);
        }
        
        private void _eventNum(s32 value) {
            Memory.RAM.WriteS32(this.pointer + 0x04, value);
        }
        
        // offsettoStaffchunk
        private u32 _staffTop() {
            return Memory.RAM.ReadU32(this.pointer + 0x08);
        }
        
        private void _staffTop(u32 value) {
            Memory.RAM.WriteU32(this.pointer + 0x08, value);
        }
        
        private s32 _staffNum() {
            return Memory.RAM.ReadS32(this.pointer + 0x0C);
        }
        
        private void _staffNum(s32 value) {
            Memory.RAM.WriteS32(this.pointer + 0x0C, value);
        }
        
        // offsettoCutchunk
        private u32 _cutTop() {
            return Memory.RAM.ReadU32(this.pointer + 0x10);
        }
        
        private void _cutTop(u32 value) {
            Memory.RAM.WriteU32(this.pointer + 0x10, value);
        }
        
        private s32 _cutNum() {
            return Memory.RAM.ReadS32(this.pointer + 0x14);
        }
        
        private void _cutNum(s32 value) {
            Memory.RAM.WriteS32(this.pointer + 0x14, value);
        }
        
        // offsettoDatachunk
        private u32 _dataTop() {
            return Memory.RAM.ReadU32(this.pointer + 0x18);
        }
        
        private void _dataTop(u32 value) {
            Memory.RAM.WriteU32(this.pointer + 0x18, value);
        }
        
        private s32 _dataNum() {
            return Memory.RAM.ReadS32(this.pointer + 0x1C);
        }
        
        private void _dataNum(s32 value) {
            Memory.RAM.WriteS32(this.pointer + 0x1C, value);
        }
        
        // offsettoFDatachunk
        private u32 _fDataTop() {
            return Memory.RAM.ReadU32(this.pointer + 0x20);
        }
        
        private void _fDataTop(u32 value) {
            Memory.RAM.WriteU32(this.pointer + 0x20, value);
        }
        
        private s32 _fDataNum() {
            return Memory.RAM.ReadS32(this.pointer + 0x24);
        }
        
        private void _fDataNum(s32 value) {
            Memory.RAM.WriteS32(this.pointer + 0x24, value);
        }
        
        // offsettoIDatachunk
        private u32 _iDataTop() {
            return Memory.RAM.ReadU32(this.pointer + 0x28);
        }
        
        private void _iDataTop(u32 value) {
            Memory.RAM.WriteU32(this.pointer + 0x28, value);
        }
        
        private s32 _iDataNum() {
            return Memory.RAM.ReadS32(this.pointer + 0x2C);
        }
        
        private void _iDataNum(s32 value) {
            Memory.RAM.WriteS32(this.pointer + 0x2C, value);
        }
        
        // offsettoSDatachunk
        private u32 _sDataTop() {
            return Memory.RAM.ReadU32(this.pointer + 0x30);
        }
        
        private void _sDataTop(u32 value) {
            Memory.RAM.WriteU32(this.pointer + 0x30, value);
        }
        
        private s32 _sDataNum() {
            return Memory.RAM.ReadS32(this.pointer + 0x34);
        }
        
        private void _sDataNum(s32 value) {
            Memory.RAM.WriteS32(this.pointer + 0x34, value);
        }
        
        // #ARRCOUNT 8
        private u8[] _unk() {
            u8[] bytes = new u8[8]; for(u32 i = 0; i < 8; i++){bytes[i] = Memory.RAM.ReadU8(this.pointer + 0x38 + (i * 1));} return bytes;
        }
        
        private void _unk(u8[] value) {
            for(u32 i = 0; i < 8; i++){Memory.RAM.WriteU8(this.pointer + 0x38 + (i * 1), value[i]);}
        }
    }
}
