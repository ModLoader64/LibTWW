//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TWW.API {
    
    
    public class dEvDtData_c {
        
        [System.Text.Json.Serialization.JsonIgnoreAttribute()]
        private u32 pointer;
        
        public char[] mName {get => this._mName(); set => this._mName(value);}//;
        
        public s32 mIndex {get => this._mIndex(); set => this._mIndex(value);}//;
        
        public s32 mSubstanceType {get => this._mSubstanceType(); set => this._mSubstanceType(value);}//;
        
        public s32 mSubstanceIdx {get => this._mSubstanceIdx(); set => this._mSubstanceIdx(value);}//;
        
        public s32 mSubstanceSize {get => this._mSubstanceSize(); set => this._mSubstanceSize(value);}//;
        
        public s32 mNextIdx {get => this._mNextIdx(); set => this._mNextIdx(value);}//;
        
        public u32[] field_0x34 {get => this._field_0x34(); set => this._field_0x34(value);}//;
        
        
        public dEvDtData_c(u32 pointer) {
           this.pointer = pointer;
        }
        
        public static uint getSize() {
          return 0x0; // DEADBEEF TODO: Fix Addr
        }
        
        // #ARRCOUNT 32
        private char[] _mName() {
            char[] bytes = new char[32]; for(u32 i = 0; i < 32; i++){bytes[i] = (char)Memory.RAM.ReadU8(this.pointer + 0x00 + (i * 1));} return bytes;
        }
        
        private void _mName(char[] value) {
            for(u32 i = 0; i < 32; i++){Memory.RAM.WriteU8(this.pointer + 0x00 + (i * 1), (u8)value[i]);}
        }
        
        private s32 _mIndex() {
            return Memory.RAM.ReadS32(this.pointer + 0x20);
        }
        
        private void _mIndex(s32 value) {
            Memory.RAM.WriteS32(this.pointer + 0x20, value);
        }
        
        private s32 _mSubstanceType() {
            return Memory.RAM.ReadS32(this.pointer + 0x24);
        }
        
        private void _mSubstanceType(s32 value) {
            Memory.RAM.WriteS32(this.pointer + 0x24, value);
        }
        
        private s32 _mSubstanceIdx() {
            return Memory.RAM.ReadS32(this.pointer + 0x28);
        }
        
        private void _mSubstanceIdx(s32 value) {
            Memory.RAM.WriteS32(this.pointer + 0x28, value);
        }
        
        private s32 _mSubstanceSize() {
            return Memory.RAM.ReadS32(this.pointer + 0x2C);
        }
        
        private void _mSubstanceSize(s32 value) {
            Memory.RAM.WriteS32(this.pointer + 0x2C, value);
        }
        
        private s32 _mNextIdx() {
            return Memory.RAM.ReadS32(this.pointer + 0x30);
        }
        
        private void _mNextIdx(s32 value) {
            Memory.RAM.WriteS32(this.pointer + 0x30, value);
        }
        
        // #ARRCOUNT 3
        private u32[] _field_0x34() {
            u32[] bytes = new u32[3]; for(u32 i = 0; i < 3; i++){bytes[i] = Memory.RAM.ReadU32(this.pointer + 0x34 + (i * 4));} return bytes;
        }
        
        private void _field_0x34(u32[] value) {
            for(u32 i = 0; i < 3; i++){Memory.RAM.WriteU32(this.pointer + 0x34 + (i * 4), value[i]);}
        }
        
    }
}
