//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TWW.API {
    
    
    public class dSv_restart_c  {
        
        [System.Text.Json.Serialization.JsonIgnoreAttribute()]
        private u32 pointer;
        
        public s8 mRestartRoom {get => this._mRestartRoom(); set => this._mRestartRoom(value);}//;
        
        public u8 mOption {get => this._mOption(); set => this._mOption(value);}//;
        
        public s8 mOptionRoomNo {get => this._mOptionRoomNo(); set => this._mOptionRoomNo(value);}//;
        
        public s16 mOptionPoint {get => this._mOptionPoint(); set => this._mOptionPoint(value);}//;
        
        public s16 mOptionRoomAngleY {get => this._mOptionRoomAngleY(); set => this._mOptionRoomAngleY(value);}//;
        
        public cXyz mOptionRoomPos {get => this._mOptionRoomPos(); set => this._mOptionRoomPos(value);}//;
        
        public s16 mStartCode {get => this._mStartCode(); set => this._mStartCode(value);}//;
        
        public s16 mRestartAngle {get => this._mRestartAngle(); set => this._mRestartAngle(value);}//;
        
        public cXyz mRestartPos {get => this._mRestartPos(); set => this._mRestartPos(value);}//;
        
        public u32 mRestartParam {get => this._mRestartParam(); set => this._mRestartParam(value);}//;
        
        public f32 mLastSpeedF {get => this._mLastSpeedF(); set => this._mLastSpeedF(value);}//;
        
        public u32 mLastMode {get => this._mLastMode(); set => this._mLastMode(value);}//;
        
        public dSv_restart_c (u32 pointer) {
           this.pointer = pointer;
        }
        
        public static uint getSize() {
          return 0x30;
        }
        
        private s8 _mRestartRoom() {
            return Memory.RAM.ReadS8(this.pointer + 0x00);
        }
        
        private void _mRestartRoom(s8 value) {
            Memory.RAM.WriteS8(this.pointer + 0x00, value);
        }
        
        private u8 _mOption() {
            return Memory.RAM.ReadU8(this.pointer + 0x01);
        }
        
        private void _mOption(u8 value) {
            Memory.RAM.WriteU8(this.pointer + 0x01, value);
        }
        
        private s8 _mOptionRoomNo() {
            return Memory.RAM.ReadS8(this.pointer + 0x02);
        }
        
        private void _mOptionRoomNo(s8 value) {
            Memory.RAM.WriteS8(this.pointer + 0x02, value);
        }
        
        private s16 _mOptionPoint() {
            return Memory.RAM.ReadS16(this.pointer + 0x04);
        }
        
        private void _mOptionPoint(s16 value) {
            Memory.RAM.WriteS16(this.pointer + 0x04, value);
        }
        
        private s16 _mOptionRoomAngleY() {
            return Memory.RAM.ReadS16(this.pointer + 0x06);
        }
        
        private void _mOptionRoomAngleY(s16 value) {
            Memory.RAM.WriteS16(this.pointer + 0x06, value);
        }
        
        private cXyz _mOptionRoomPos() {
            return new cXyz(this.pointer + 0x08);
        }
        
        private void _mOptionRoomPos(cXyz value) {
        }
        
        private s16 _mStartCode() {
            return Memory.RAM.ReadS16(this.pointer + 0x14);
        }
        
        private void _mStartCode(s16 value) {
            Memory.RAM.WriteS16(this.pointer + 0x14, value);
        }
        
        private s16 _mRestartAngle() {
            return Memory.RAM.ReadS16(this.pointer + 0x16);
        }
        
        private void _mRestartAngle(s16 value) {
            Memory.RAM.WriteS16(this.pointer + 0x16, value);
        }
        
        private cXyz _mRestartPos() {
            return new cXyz(this.pointer + 0x18);
        }
        
        private void _mRestartPos(cXyz value) {
        }
        
        private u32 _mRestartParam() {
            return Memory.RAM.ReadU32(this.pointer + 0x24);
        }
        
        private void _mRestartParam(u32 value) {
            Memory.RAM.WriteU32(this.pointer + 0x24, value);
        }
        
        private f32 _mLastSpeedF() {
            return Memory.RAM.ReadF32(this.pointer + 0x28);
        }
        
        private void _mLastSpeedF(f32 value) {
            Memory.RAM.WriteF32(this.pointer + 0x28, value);
        }
        
        private u32 _mLastMode() {
            return Memory.RAM.ReadU32(this.pointer + 0x2C);
        }
        
        private void _mLastMode(u32 value) {
            Memory.RAM.WriteU32(this.pointer + 0x2C, value);
        }
    }
}
